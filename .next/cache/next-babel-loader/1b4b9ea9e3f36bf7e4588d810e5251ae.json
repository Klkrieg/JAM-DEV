{"ast":null,"code":"var _jsxFileName = \"/Users/karsonkrieg/Desktop/JAM-DEV/components/Buttons/Button.component.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport styles from \"./Button.module.scss\";\n\nconst Button = props => {\n  useEffect(() => {\n    props.status.includes(e.target.id) ? e.target.className = styles.clicked : e.target.className = styles.unClicked;\n  }, [props.status]);\n\n  const handleClick = e => {\n    props.filterClick(props.id); // if (status == [\"all\"] && target == \"all\") {\n    // \treturn\n    // }else if(status == [\"all\"] && target != \"all\"){\n    // }\n    //if status == ['all'] and the button pressed == all there should\n    //be no change in either status or the color of the all button\n    //if status == ['all'] and the button pressed != all the\n    //color of all should change as well as the color of the button pressed && status == [\"button pressed\"]\n    //if status != ['all'] && status includes the button pressed the button pressed should change\n    // const target = e.target;\n    // target.className == styles.unClicked\n    // \t? (target.className = styles.clicked)\n    // \t: (target.className = styles.unClicked);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.regButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, __jsx(\"button\", {\n    className: props.id === \"all\" ? styles.clicked : styles.unClicked,\n    id: props.id,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }\n  }, props.children));\n};\n\nexport default Button;","map":{"version":3,"sources":["/Users/karsonkrieg/Desktop/JAM-DEV/components/Buttons/Button.component.jsx"],"names":["useEffect","styles","Button","props","status","includes","e","target","id","className","clicked","unClicked","handleClick","filterClick","regButton","children"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AACA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACzBH,EAAAA,SAAS,CAAC,MAAM;AACfG,IAAAA,KAAK,CAACC,MAAN,CAAaC,QAAb,CAAsBC,CAAC,CAACC,MAAF,CAASC,EAA/B,IACIF,CAAC,CAACC,MAAF,CAASE,SAAT,GAAqBR,MAAM,CAACS,OADhC,GAEIJ,CAAC,CAACC,MAAF,CAASE,SAAT,GAAqBR,MAAM,CAACU,SAFhC;AAGA,GAJQ,EAIN,CAACR,KAAK,CAACC,MAAP,CAJM,CAAT;;AAKA,QAAMQ,WAAW,GAAIN,CAAD,IAAO;AAC1BH,IAAAA,KAAK,CAACU,WAAN,CAAkBV,KAAK,CAACK,EAAxB,EAD0B,CAG1B;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA,GArBD;;AAuBA,SACC;AAAK,IAAA,SAAS,EAAEP,MAAM,CAACa,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,SAAS,EAAEX,KAAK,CAACK,EAAN,KAAa,KAAb,GAAqBP,MAAM,CAACS,OAA5B,GAAsCT,MAAM,CAACU,SADzD;AAEC,IAAA,EAAE,EAAER,KAAK,CAACK,EAFX;AAGC,IAAA,OAAO,EAAEI,WAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKET,KAAK,CAACY,QALR,CADD,CADD;AAWA,CAxCD;;AA0CA,eAAeb,MAAf","sourcesContent":["import { useEffect } from \"react\";\nimport styles from \"./Button.module.scss\";\nconst Button = (props) => {\n\tuseEffect(() => {\n\t\tprops.status.includes(e.target.id)\n\t\t\t? (e.target.className = styles.clicked)\n\t\t\t: (e.target.className = styles.unClicked);\n\t}, [props.status]);\n\tconst handleClick = (e) => {\n\t\tprops.filterClick(props.id);\n\n\t\t// if (status == [\"all\"] && target == \"all\") {\n\t\t// \treturn\n\t\t// }else if(status == [\"all\"] && target != \"all\"){\n\n\t\t// }\n\t\t//if status == ['all'] and the button pressed == all there should\n\t\t//be no change in either status or the color of the all button\n\n\t\t//if status == ['all'] and the button pressed != all the\n\t\t//color of all should change as well as the color of the button pressed && status == [\"button pressed\"]\n\n\t\t//if status != ['all'] && status includes the button pressed the button pressed should change\n\n\t\t// const target = e.target;\n\n\t\t// target.className == styles.unClicked\n\t\t// \t? (target.className = styles.clicked)\n\t\t// \t: (target.className = styles.unClicked);\n\t};\n\n\treturn (\n\t\t<div className={styles.regButton}>\n\t\t\t<button\n\t\t\t\tclassName={props.id === \"all\" ? styles.clicked : styles.unClicked}\n\t\t\t\tid={props.id}\n\t\t\t\tonClick={handleClick}\n\t\t\t>\n\t\t\t\t{props.children}\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}