{"ast":null,"code":"// import mongoose from \"mongoose\";\n// const connection = {};\n// async function dbConnect() {\n// \tif (connection.isConnected) {\n// \t\treturn;\n// \t}\n// \ttry {\n// \t\tconst db = await mongoose.connect(process.env.MONGODB_URI, {\n// \t\t\tuseNewUrlParser: true,\n// \t\t\tuseUnifiedTopology: true,\n// \t\t});\n// \t\tconnection.isConnected = db.connections[0].readyState;\n// \t\tconsole.log(db.connections[0].readyState);\n// \t} catch {\n// \t\treturn \"Nope\";\n// \t}\n// }\n// export default dbConnect;\nimport mongoose from \"mongoose\"; // we'll import all the schemas here and return them\n// on the mongo connection object\n// for use in the handlers\n\nimport userSchema from \"../models/users.js\";\n\nconst dbConnect = async () => {\n  const connection = await mongoose.createConnection(process.env.MONGODB_URI, {\n    useNewUrlParser: true,\n    bufferCommands: false,\n    bufferMaxEntries: 0,\n    useUnifiedTopology: true\n  });\n  const Users = connection.model(\"Users\", userSchema);\n  return {\n    connection,\n    models: {\n      Users\n    }\n  };\n};\n\nexport default dbConnect;","map":{"version":3,"sources":["/Users/karsonkrieg/Desktop/JAM-DEV/utils/dbConnect.js"],"names":["mongoose","userSchema","dbConnect","connection","createConnection","process","env","MONGODB_URI","useNewUrlParser","bufferCommands","bufferMaxEntries","useUnifiedTopology","Users","model","models"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,oBAAvB;;AAEA,MAAMC,SAAS,GAAG,YAAY;AAC7B,QAAMC,UAAU,GAAG,MAAMH,QAAQ,CAACI,gBAAT,CAA0BC,OAAO,CAACC,GAAR,CAAYC,WAAtC,EAAmD;AAC3EC,IAAAA,eAAe,EAAE,IAD0D;AAE3EC,IAAAA,cAAc,EAAE,KAF2D;AAG3EC,IAAAA,gBAAgB,EAAE,CAHyD;AAI3EC,IAAAA,kBAAkB,EAAE;AAJuD,GAAnD,CAAzB;AAMA,QAAMC,KAAK,GAAGT,UAAU,CAACU,KAAX,CAAiB,OAAjB,EAA0BZ,UAA1B,CAAd;AACA,SAAO;AACNE,IAAAA,UADM;AAENW,IAAAA,MAAM,EAAE;AACPF,MAAAA;AADO;AAFF,GAAP;AAMA,CAdD;;AAgBA,eAAeV,SAAf","sourcesContent":["// import mongoose from \"mongoose\";\n\n// const connection = {};\n// async function dbConnect() {\n// \tif (connection.isConnected) {\n// \t\treturn;\n// \t}\n\n// \ttry {\n// \t\tconst db = await mongoose.connect(process.env.MONGODB_URI, {\n// \t\t\tuseNewUrlParser: true,\n// \t\t\tuseUnifiedTopology: true,\n// \t\t});\n// \t\tconnection.isConnected = db.connections[0].readyState;\n// \t\tconsole.log(db.connections[0].readyState);\n// \t} catch {\n// \t\treturn \"Nope\";\n// \t}\n// }\n\n// export default dbConnect;\n\nimport mongoose from \"mongoose\";\n\n// we'll import all the schemas here and return them\n// on the mongo connection object\n// for use in the handlers\nimport userSchema from \"../models/users.js\";\n\nconst dbConnect = async () => {\n\tconst connection = await mongoose.createConnection(process.env.MONGODB_URI, {\n\t\tuseNewUrlParser: true,\n\t\tbufferCommands: false,\n\t\tbufferMaxEntries: 0,\n\t\tuseUnifiedTopology: true,\n\t});\n\tconst Users = connection.model(\"Users\", userSchema);\n\treturn {\n\t\tconnection,\n\t\tmodels: {\n\t\t\tUsers,\n\t\t},\n\t};\n};\n\nexport default dbConnect;\n"]},"metadata":{},"sourceType":"module"}