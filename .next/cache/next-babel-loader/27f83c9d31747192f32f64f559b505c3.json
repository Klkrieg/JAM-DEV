{"ast":null,"code":"import bcrypt from \"bcrypt\";\nimport Users from \"../../../models/users.js\";\nimport dbConnect from \"../../../utils/dbConnect\";\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const users = await Users.find({});\n        res.status(200).json({\n          success: true,\n          data: users\n        });\n      } catch {\n        res.status(400);\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const user = await Users.create(req.body);\n        res.status(201).json({\n          success: true,\n          data: user\n        });\n      } catch {\n        res.status(400).json({\n          succes: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        succes: false\n      });\n  }\n}); // router.post(\"/api/users\", ({ body }, res) => {\n// \tUsers.findOne({ email: req.body.email }, \"email\", async (err, user) => {\n// \t\ttry {\n// \t\t\tif (user) {\n// \t\t\t\tconsole.log(\"A user with that email already exists.\");\n// \t\t\t\tres.status(409).send();\n// \t\t\t} else if (!user) {\n// \t\t\t\tconst salt = await bcrypt.genSalt();\n// \t\t\t\tconst hashedPass = await bcrypt.hash(body.password, salt);\n// \t\t\t\tbody.password = hashedPass;\n// \t\t\t\tUsers.create(body)\n// \t\t\t\t\t.then((dbUsers) => {\n// \t\t\t\t\t\tres.json(dbUsers);\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\tres.status(400).json(err);\n// \t\t\t\t\t});\n// \t\t\t}\n// \t\t} catch {\n// \t\t\tres.send(err);\n// \t\t}\n// \t});\n// });","map":{"version":3,"sources":["/Users/karsonkrieg/Desktop/JAM-DEV/pages/api/users/index.js"],"names":["bcrypt","Users","dbConnect","req","res","method","users","find","status","json","success","data","user","create","body","succes"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAnB;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMC,KAAK,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,EAAX,CAApB;AACAH,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACA,OAHD,CAGE,MAAM;AACPF,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;;AACD;;AACD,SAAK,MAAL;AACC,UAAI;AACH,cAAMI,IAAI,GAAG,MAAMX,KAAK,CAACY,MAAN,CAAaV,GAAG,CAACW,IAAjB,CAAnB;AAEAV,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEC;AAAvB,SAArB;AACA,OAJD,CAIE,MAAM;AACPR,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AACD;AACCX,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEM,QAAAA,MAAM,EAAE;AAAV,OAArB;AAnBF;AAqBA,CAvBD,E,CAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import bcrypt from \"bcrypt\";\nimport Users from \"../../../models/users.js\";\nimport dbConnect from \"../../../utils/dbConnect\";\n\ndbConnect();\n\nexport default async (req, res) => {\n\tconst { method } = req;\n\tswitch (method) {\n\t\tcase \"GET\":\n\t\t\ttry {\n\t\t\t\tconst users = await Users.find({});\n\t\t\t\tres.status(200).json({ success: true, data: users });\n\t\t\t} catch {\n\t\t\t\tres.status(400);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"POST\":\n\t\t\ttry {\n\t\t\t\tconst user = await Users.create(req.body);\n\n\t\t\t\tres.status(201).json({ success: true, data: user });\n\t\t\t} catch {\n\t\t\t\tres.status(400).json({ succes: false });\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tres.status(400).json({ succes: false });\n\t}\n};\n\n// router.post(\"/api/users\", ({ body }, res) => {\n// \tUsers.findOne({ email: req.body.email }, \"email\", async (err, user) => {\n// \t\ttry {\n// \t\t\tif (user) {\n// \t\t\t\tconsole.log(\"A user with that email already exists.\");\n// \t\t\t\tres.status(409).send();\n// \t\t\t} else if (!user) {\n// \t\t\t\tconst salt = await bcrypt.genSalt();\n// \t\t\t\tconst hashedPass = await bcrypt.hash(body.password, salt);\n// \t\t\t\tbody.password = hashedPass;\n// \t\t\t\tUsers.create(body)\n// \t\t\t\t\t.then((dbUsers) => {\n// \t\t\t\t\t\tres.json(dbUsers);\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\tres.status(400).json(err);\n// \t\t\t\t\t});\n// \t\t\t}\n// \t\t} catch {\n// \t\t\tres.send(err);\n// \t\t}\n// \t});\n// });\n"]},"metadata":{},"sourceType":"module"}