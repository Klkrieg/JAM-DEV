{"ast":null,"code":"import bcrypt from \"bcrypt\";\nimport Users from \"../../../models/users.js\";\nimport dbConnect from \"../../../utils/dbConnect\";\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const users = await Users.find({});\n        res.status(200).json({\n          success: true,\n          data: users\n        });\n      } catch {\n        res.status(400);\n      }\n\n      break;\n\n    case \"POST\":\n      Users.findOne({\n        email: req.body.email\n      }, \"email\", async (err, user) => {\n        try {\n          if (user) {\n            console.log(\"A user with that email already exists.\");\n            res.status(409).send();\n          } else if (!user) {\n            const salt = await bcrypt.genSalt();\n            const hashedPass = await bcrypt.hash(req.body.password, salt);\n            req.body.password = hashedPass;\n            Users.create(body).then(dbUsers => {\n              res.json(dbUsers);\n            }).catch(err => {\n              console.log(err);\n              res.status(400).json(err);\n            });\n          }\n        } catch {\n          res.send(err);\n        }\n      }); // try {\n      // \tconst user = await Users.create(req.body);\n      // \tconst user = await Users.findOne({ email: req.body.email }, \"email\");\n      // \tif (user) {\n      // \t\tconsole.log(\"Email already exists\");\n      // \t}\n      // \tres.status(201).json({ success: true, data: user });\n      // } catch {\n      // \tres.status(400).json({ succes: false });\n      // }\n\n      break;\n\n    default:\n      res.status(400).json({\n        succes: false\n      });\n  }\n}); // router.post(\"/api/users\", (req, res) => {\n// \tUsers.findOne({ email: req.body.email }, \"email\", async (err, user) => {\n// \t\ttry {\n// \t\t\tif (user) {\n// \t\t\t\tconsole.log(\"A user with that email already exists.\");\n// \t\t\t\tres.status(409).send();\n// \t\t\t} else if (!user) {\n// \t\t\t\tconst salt = await bcrypt.genSalt();\n// \t\t\t\tconst hashedPass = await bcrypt.hash(req.body.password, salt);\n// \t\t\t\treq.body.password = hashedPass;\n// \t\t\t\tUsers.create(body)\n// \t\t\t\t\t.then((dbUsers) => {\n// \t\t\t\t\t\tres.json(dbUsers);\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\tres.status(400).json(err);\n// \t\t\t\t\t});\n// \t\t\t}\n// \t\t} catch {\n// \t\t\tres.send(err);\n// \t\t}\n// \t});\n// });","map":{"version":3,"sources":["/Users/karsonkrieg/Desktop/JAM-DEV/pages/api/users/index.js"],"names":["bcrypt","Users","dbConnect","req","res","method","users","find","status","json","success","data","findOne","email","body","err","user","console","log","send","salt","genSalt","hashedPass","hash","password","create","then","dbUsers","catch","succes"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAnB;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMC,KAAK,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,EAAX,CAApB;AACAH,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACA,OAHD,CAGE,MAAM;AACPF,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;;AACD;;AACD,SAAK,MAAL;AACCP,MAAAA,KAAK,CAACW,OAAN,CAAc;AAAEC,QAAAA,KAAK,EAAEV,GAAG,CAACW,IAAJ,CAASD;AAAlB,OAAd,EAAyC,OAAzC,EAAkD,OAAOE,GAAP,EAAYC,IAAZ,KAAqB;AACtE,YAAI;AACH,cAAIA,IAAJ,EAAU;AACTC,YAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAd,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBW,IAAhB;AACA,WAHD,MAGO,IAAI,CAACH,IAAL,EAAW;AACjB,kBAAMI,IAAI,GAAG,MAAMpB,MAAM,CAACqB,OAAP,EAAnB;AACA,kBAAMC,UAAU,GAAG,MAAMtB,MAAM,CAACuB,IAAP,CAAYpB,GAAG,CAACW,IAAJ,CAASU,QAArB,EAA+BJ,IAA/B,CAAzB;AACAjB,YAAAA,GAAG,CAACW,IAAJ,CAASU,QAAT,GAAoBF,UAApB;AACArB,YAAAA,KAAK,CAACwB,MAAN,CAAaX,IAAb,EACEY,IADF,CACQC,OAAD,IAAa;AAClBvB,cAAAA,GAAG,CAACK,IAAJ,CAASkB,OAAT;AACA,aAHF,EAIEC,KAJF,CAISb,GAAD,IAAS;AACfE,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAX,cAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,GAArB;AACA,aAPF;AAQA;AACD,SAjBD,CAiBE,MAAM;AACPX,UAAAA,GAAG,CAACe,IAAJ,CAASJ,GAAT;AACA;AACD,OArBD,EADD,CAuBC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACD;AACCX,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEoB,QAAAA,MAAM,EAAE;AAAV,OAArB;AA5CF;AA8CA,CAhDD,E,CAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import bcrypt from \"bcrypt\";\nimport Users from \"../../../models/users.js\";\nimport dbConnect from \"../../../utils/dbConnect\";\n\ndbConnect();\n\nexport default async (req, res) => {\n\tconst { method } = req;\n\tswitch (method) {\n\t\tcase \"GET\":\n\t\t\ttry {\n\t\t\t\tconst users = await Users.find({});\n\t\t\t\tres.status(200).json({ success: true, data: users });\n\t\t\t} catch {\n\t\t\t\tres.status(400);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"POST\":\n\t\t\tUsers.findOne({ email: req.body.email }, \"email\", async (err, user) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tconsole.log(\"A user with that email already exists.\");\n\t\t\t\t\t\tres.status(409).send();\n\t\t\t\t\t} else if (!user) {\n\t\t\t\t\t\tconst salt = await bcrypt.genSalt();\n\t\t\t\t\t\tconst hashedPass = await bcrypt.hash(req.body.password, salt);\n\t\t\t\t\t\treq.body.password = hashedPass;\n\t\t\t\t\t\tUsers.create(body)\n\t\t\t\t\t\t\t.then((dbUsers) => {\n\t\t\t\t\t\t\t\tres.json(dbUsers);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t\t\tres.status(400).json(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch {\n\t\t\t\t\tres.send(err);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// try {\n\t\t\t// \tconst user = await Users.create(req.body);\n\t\t\t// \tconst user = await Users.findOne({ email: req.body.email }, \"email\");\n\t\t\t// \tif (user) {\n\t\t\t// \t\tconsole.log(\"Email already exists\");\n\t\t\t// \t}\n\t\t\t// \tres.status(201).json({ success: true, data: user });\n\t\t\t// } catch {\n\t\t\t// \tres.status(400).json({ succes: false });\n\t\t\t// }\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tres.status(400).json({ succes: false });\n\t}\n};\n\n// router.post(\"/api/users\", (req, res) => {\n// \tUsers.findOne({ email: req.body.email }, \"email\", async (err, user) => {\n// \t\ttry {\n// \t\t\tif (user) {\n// \t\t\t\tconsole.log(\"A user with that email already exists.\");\n// \t\t\t\tres.status(409).send();\n// \t\t\t} else if (!user) {\n// \t\t\t\tconst salt = await bcrypt.genSalt();\n// \t\t\t\tconst hashedPass = await bcrypt.hash(req.body.password, salt);\n// \t\t\t\treq.body.password = hashedPass;\n// \t\t\t\tUsers.create(body)\n// \t\t\t\t\t.then((dbUsers) => {\n// \t\t\t\t\t\tres.json(dbUsers);\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\tres.status(400).json(err);\n// \t\t\t\t\t});\n// \t\t\t}\n// \t\t} catch {\n// \t\t\tres.send(err);\n// \t\t}\n// \t});\n// });\n"]},"metadata":{},"sourceType":"module"}