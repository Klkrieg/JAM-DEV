{"ast":null,"code":"import bcrypt from \"bcrypt\";\nimport Users from \"../../../models/users.js\";\nimport dbConnect from \"../../../utils/dbConnect\";\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const users = await Users.find({});\n        res.status(200).json({\n          success: true,\n          data: users\n        });\n      } catch {\n        res.status(400);\n      }\n\n      break;\n\n    case \"POST\":\n      // Users.create(req.body, (err, user) => {\n      // \tif (err) {\n      // \t\treturn res.status(400).json(err);\n      // \t} else {\n      // \t\treturn res.status(200).json({ success: true, user });\n      // \t}\n      // });\n      Users.findOne({\n        email: req.body.email\n      }, \"email\", async (err, user) => {\n        try {\n          if (user) {\n            console.log(\"A user with that email already exists.\");\n            res.status(409).send();\n          } else if (!user) {\n            const salt = await bcrypt.genSalt();\n            const hashedPass = await bcrypt.hash(req.body.password, salt);\n            req.body.password = hashedPass;\n            Users.create(req.body, (err, user) => {\n              if (err) {\n                return res.status(400).json(err);\n              } else {\n                return res.status(200).json({\n                  success: true,\n                  user\n                });\n              }\n            });\n          }\n        } catch {\n          res.send(err);\n        }\n      });\n      break;\n\n    default:\n      res.status(400).json({\n        succes: false\n      });\n  }\n}); // router.post(\"/api/users\", (req, res) => {\n// \tUsers.findOne({ email: req.body.email }, \"email\", async (err, user) => {\n// \t\ttry {\n// \t\t\tif (user) {\n// \t\t\t\tconsole.log(\"A user with that email already exists.\");\n// \t\t\t\tres.status(409).send();\n// \t\t\t} else if (!user) {\n// \t\t\t\tconst salt = await bcrypt.genSalt();\n// \t\t\t\tconst hashedPass = await bcrypt.hash(req.body.password, salt);\n// \t\t\t\treq.body.password = hashedPass;\n// \t\t\t\tUsers.create(body)\n// \t\t\t\t\t.then((dbUsers) => {\n// \t\t\t\t\t\tres.json(dbUsers);\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\tres.status(400).json(err);\n// \t\t\t\t\t});\n// \t\t\t}\n// \t\t} catch {\n// \t\t\tres.send(err);\n// \t\t}\n// \t});\n// });","map":null,"metadata":{},"sourceType":"module"}