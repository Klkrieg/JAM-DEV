{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport mongoose from \"mongoose\";\nimport resourceSchema from \"../models/resource\";\nimport userSchema from \"../models/users\";\nvar connection = {};\n\nvar dbConnect = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var db, Users, Resource;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!connection.isConnected) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return mongoose.connect(process.env.MONGODB_URI, {\n              useNewUrlParser: true,\n              useUnifiedTopology: true\n            });\n\n          case 5:\n            db = _context.sent;\n            Users = mongoose.model(\"Users\", userSchema);\n            Resource = mongoose.model(\"Resource\", resourceSchema);\n            connection.isConnected = db.connections[0].readyState;\n            connection.models = {\n              Users: Users,\n              Resource: Resource\n            };\n            console.log(db.models);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", \"Did not connect to Mongo\");\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 13]]);\n  }));\n\n  return function dbConnect() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default dbConnect;","map":{"version":3,"sources":["/Users/karsonkrieg/Desktop/JAM-DEV/utils/dbConnect.js"],"names":["mongoose","resourceSchema","userSchema","connection","dbConnect","isConnected","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","db","Users","model","Resource","connections","readyState","models","console","log"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,IAAMC,UAAU,GAAG,EAAnB;;AACA,IAAMC,SAAS;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACbD,UAAU,CAACE,WADE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAKCL,QAAQ,CAACM,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,WAA7B,EAA0C;AAC1DC,cAAAA,eAAe,EAAE,IADyC;AAE1DC,cAAAA,kBAAkB,EAAE;AAFsC,aAA1C,CALD;;AAAA;AAKVC,YAAAA,EALU;AASVC,YAAAA,KATU,GASFb,QAAQ,CAACc,KAAT,CAAe,OAAf,EAAwBZ,UAAxB,CATE;AAUVa,YAAAA,QAVU,GAUCf,QAAQ,CAACc,KAAT,CAAe,UAAf,EAA2Bb,cAA3B,CAVD;AAWhBE,YAAAA,UAAU,CAACE,WAAX,GAAyBO,EAAE,CAACI,WAAH,CAAe,CAAf,EAAkBC,UAA3C;AACAd,YAAAA,UAAU,CAACe,MAAX,GAAoB;AACnBL,cAAAA,KAAK,EAALA,KADmB;AAEnBE,cAAAA,QAAQ,EAARA;AAFmB,aAApB;AAIAI,YAAAA,OAAO,CAACC,GAAR,CAAYR,EAAE,CAACM,MAAf;AAhBgB;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAkBT,0BAlBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATd,SAAS;AAAA;AAAA;AAAA,GAAf;;AAsBA,eAAeA,SAAf","sourcesContent":["import mongoose from \"mongoose\";\nimport resourceSchema from \"../models/resource\";\nimport userSchema from \"../models/users\";\n\nconst connection = {};\nconst dbConnect = async () => {\n\tif (connection.isConnected) {\n\t\treturn;\n\t}\n\ttry {\n\t\tconst db = await mongoose.connect(process.env.MONGODB_URI, {\n\t\t\tuseNewUrlParser: true,\n\t\t\tuseUnifiedTopology: true,\n\t\t});\n\t\tconst Users = mongoose.model(\"Users\", userSchema);\n\t\tconst Resource = mongoose.model(\"Resource\", resourceSchema);\n\t\tconnection.isConnected = db.connections[0].readyState;\n\t\tconnection.models = {\n\t\t\tUsers,\n\t\t\tResource,\n\t\t};\n\t\tconsole.log(db.models);\n\t} catch {\n\t\treturn \"Did not connect to Mongo\";\n\t}\n};\n\nexport default dbConnect;\n"]},"metadata":{},"sourceType":"module"}