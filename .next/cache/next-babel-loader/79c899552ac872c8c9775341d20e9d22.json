{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport mongoose from \"mongoose\"; //import resourceSchema from \"../models/resource\";\n//import userSchema from \"../models/users\";\n\nvar connection = {};\n\nvar dbConnect = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var db;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!connection.isConnected) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return mongoose.connect(process.env.MONGODB_URI, {\n              useNewUrlParser: true,\n              useUnifiedTopology: true\n            });\n\n          case 5:\n            db = _context.sent;\n            //const Resource = mongoose.model(\"Resource\", resourceSchema);\n            //const Users = mongoose.model(\"Users\", userSchema);\n            connection.isConnected = db.connections[0].readyState; // connection.models = {\n            // \tResource,\n            // \tUsers,\n            // };\n\n            console.log(connection.models.Resource);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", \"Did not connect to Mongo\");\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 10]]);\n  }));\n\n  return function dbConnect() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default dbConnect;","map":{"version":3,"sources":["/Users/karsonkrieg/Desktop/JAM-DEV/utils/dbConnect.js"],"names":["mongoose","connection","dbConnect","isConnected","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","db","connections","readyState","console","log","models","Resource"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB,C,CACA;AACA;;AACA,IAAMC,UAAU,GAAG,EAAnB;;AACA,IAAMC,SAAS;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACbD,UAAU,CAACE,WADE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAKCH,QAAQ,CAACI,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,WAA7B,EAA0C;AAC1DC,cAAAA,eAAe,EAAE,IADyC;AAE1DC,cAAAA,kBAAkB,EAAE;AAFsC,aAA1C,CALD;;AAAA;AAKVC,YAAAA,EALU;AAShB;AACA;AACAT,YAAAA,UAAU,CAACE,WAAX,GAAyBO,EAAE,CAACC,WAAH,CAAe,CAAf,EAAkBC,UAA3C,CAXgB,CAYhB;AACA;AACA;AACA;;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYb,UAAU,CAACc,MAAX,CAAkBC,QAA9B;AAhBgB;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAkBT,0BAlBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATd,SAAS;AAAA;AAAA;AAAA,GAAf;;AAsBA,eAAeA,SAAf","sourcesContent":["import mongoose from \"mongoose\";\n//import resourceSchema from \"../models/resource\";\n//import userSchema from \"../models/users\";\nconst connection = {};\nconst dbConnect = async () => {\n\tif (connection.isConnected) {\n\t\treturn;\n\t}\n\ttry {\n\t\tconst db = await mongoose.connect(process.env.MONGODB_URI, {\n\t\t\tuseNewUrlParser: true,\n\t\t\tuseUnifiedTopology: true,\n\t\t});\n\t\t//const Resource = mongoose.model(\"Resource\", resourceSchema);\n\t\t//const Users = mongoose.model(\"Users\", userSchema);\n\t\tconnection.isConnected = db.connections[0].readyState;\n\t\t// connection.models = {\n\t\t// \tResource,\n\t\t// \tUsers,\n\t\t// };\n\t\tconsole.log(connection.models.Resource);\n\t} catch {\n\t\treturn \"Did not connect to Mongo\";\n\t}\n};\n\nexport default dbConnect;\n"]},"metadata":{},"sourceType":"module"}